package com.w8.base.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Fid = new Property(1, String.class, "fid", false, "FID");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property Abc = new Property(6, String.class, "abc", false, "ABC");
        public final static Property First_abc = new Property(7, String.class, "first_abc", false, "FIRST_ABC");
        public final static Property Showabc = new Property(8, int.class, "showabc", false, "SHOWABC");
        public final static Property Shie = new Property(9, int.class, "shie", false, "SHIE");
        public final static Property Typ = new Property(10, int.class, "typ", false, "TYP");
        public final static Property Degree = new Property(11, int.class, "degree", false, "DEGREE");
    }


    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"FID\" TEXT NOT NULL ," + // 1: fid
                "\"ACCOUNT\" TEXT NOT NULL ," + // 2: account
                "\"PHONE\" TEXT NOT NULL ," + // 3: phone
                "\"NICKNAME\" TEXT NOT NULL ," + // 4: nickname
                "\"REMARK\" TEXT NOT NULL ," + // 5: remark
                "\"ABC\" TEXT NOT NULL ," + // 6: abc
                "\"FIRST_ABC\" TEXT NOT NULL ," + // 7: first_abc
                "\"SHOWABC\" INTEGER NOT NULL ," + // 8: showabc
                "\"SHIE\" INTEGER NOT NULL ," + // 9: shie
                "\"TYP\" INTEGER NOT NULL ," + // 10: typ
                "\"DEGREE\" INTEGER NOT NULL );"); // 11: degree
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FRIEND_FID ON \"FRIEND\"" +
                " (\"FID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getFid());
        stmt.bindString(3, entity.getAccount());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getNickname());
        stmt.bindString(6, entity.getRemark());
        stmt.bindString(7, entity.getAbc());
        stmt.bindString(8, entity.getFirst_abc());
        stmt.bindLong(9, entity.getShowabc());
        stmt.bindLong(10, entity.getShie());
        stmt.bindLong(11, entity.getTyp());
        stmt.bindLong(12, entity.getDegree());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getFid());
        stmt.bindString(3, entity.getAccount());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getNickname());
        stmt.bindString(6, entity.getRemark());
        stmt.bindString(7, entity.getAbc());
        stmt.bindString(8, entity.getFirst_abc());
        stmt.bindLong(9, entity.getShowabc());
        stmt.bindLong(10, entity.getShie());
        stmt.bindLong(11, entity.getTyp());
        stmt.bindLong(12, entity.getDegree());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // fid
            cursor.getString(offset + 2), // account
            cursor.getString(offset + 3), // phone
            cursor.getString(offset + 4), // nickname
            cursor.getString(offset + 5), // remark
            cursor.getString(offset + 6), // abc
            cursor.getString(offset + 7), // first_abc
            cursor.getInt(offset + 8), // showabc
            cursor.getInt(offset + 9), // shie
            cursor.getInt(offset + 10), // typ
            cursor.getInt(offset + 11) // degree
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFid(cursor.getString(offset + 1));
        entity.setAccount(cursor.getString(offset + 2));
        entity.setPhone(cursor.getString(offset + 3));
        entity.setNickname(cursor.getString(offset + 4));
        entity.setRemark(cursor.getString(offset + 5));
        entity.setAbc(cursor.getString(offset + 6));
        entity.setFirst_abc(cursor.getString(offset + 7));
        entity.setShowabc(cursor.getInt(offset + 8));
        entity.setShie(cursor.getInt(offset + 9));
        entity.setTyp(cursor.getInt(offset + 10));
        entity.setDegree(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Friend entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Friend entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
